{"version":3,"sources":["./src/environments/environment.ts","./src/app/root.service.ts","./src/app/dashboard/dashboard.component.ts","./src/app/dashboard/dashboard.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/register-page/register-page.component.ts","./src/app/register-page/register-page.component.html","./src/app/login-page/login-page.component.ts","./src/app/login-page/login-page.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RootService {\r\n\r\n  constructor(public http: HttpClient) { }\r\n\r\n  readonly baseUrl = 'http://localhost:8000'\r\n  readonly getAllCertificate = '/ndsCertificateData'\r\n  readonly register = '/register'\r\n  readonly login = '/login'\r\n\r\n  getList(){\r\n    return this.http.get(`${this.baseUrl}${this.getAllCertificate}`)\r\n   }\r\n\r\n   registerUser(body:any){\r\n      return this.http.post(`${this.baseUrl}${this.register}`, body, {\r\n        observe:'body'\r\n      })\r\n   }\r\n\r\n   loginUser(body:any){\r\n      return this.http.post(`${this.baseUrl}${this.login}`, body, {\r\n        observe:'body'\r\n      })\r\n   }\r\n  }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>dashboard works!</p>\r\n","import { Component } from '@angular/core';\r\nimport { RootService } from './root.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  title = 'ndsapp';\r\n\r\n  constructor(public root: RootService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.root.getList().subscribe((result) => {\r\n      console.log('dataSource', result);\r\n    });\r\n  }\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n// Service\r\nimport { RootService } from './root.service'\r\n\r\n// Angular Material Imports\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatButtonModule} from '@angular/material/button';\r\nimport { LoginPageComponent } from './login-page/login-page.component';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { RegisterPageComponent } from './register-page/register-page.component';\r\nimport { DashboardComponent } from './dashboard/dashboard.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginPageComponent,\r\n    RegisterPageComponent,\r\n    DashboardComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    // Angular Material Imports\r\n    MatSliderModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatFormFieldModule\r\n  ],\r\n  providers: [RootService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { RootService } from '../root.service'\r\nimport { AbstractControl, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-register-page',\r\n  templateUrl: './register-page.component.html',\r\n  styleUrls: ['./register-page.component.scss']\r\n})\r\nexport class RegisterPageComponent implements OnInit {\r\n  authForm:any = FormGroup;\r\n  successMsg:any;\r\n  constructor(private root: RootService) {\r\n    this.authForm = new FormGroup({\r\n    email: new FormControl(null, Validators.email),\r\n    username: new FormControl(null, Validators.required),\r\n    password: new FormControl(null, Validators.required),\r\n    cnfpass: new FormControl(null)\r\n    });\r\n\r\n    this.authForm.controls.password.valueChanges.subscribe(\r\n      () => this.authForm.cnfpass.updateValueAndValidity()\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  isValid(controlName:any){\r\n    return this.authForm.get(controlName).invalid && this.authForm.get(controlName).touched;\r\n  }\r\n\r\n  passValidator(control: AbstractControl){\r\n    if(control && (control.value !== null || control.value !== undefined)){\r\n      const cnfpassValue = control.value;\r\n\r\n      const passControl = control.root.get('password');\r\n      if(passControl){\r\n        const passValue = passControl.value;\r\n        if(passValue !== cnfpassValue || passValue === ''){\r\n          return {\r\n            isError:true\r\n          };\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n\r\n  register(){\r\n    console.log(\"authForm\", this.authForm.value)\r\n    if(this.authForm.valid){\r\n      this.root.registerUser(this.authForm.value).subscribe(\r\n        data => this.successMsg = \"Registration Success\",\r\n        err => this.successMsg = \"Could not register\"\r\n      );\r\n    }\r\n  }\r\n}\r\n","  <div class=\"signin-content\">\r\n      <mat-card-content>\r\n        <h1>Register</h1>\r\n        <p class=\"welcomeHeading\">Welcome!!<br><br> Please Create Your Account</p>\r\n        <form [formGroup]=\"authForm\">\r\n          <mat-form-field class=\"full-width-input\">\r\n            <input matInput placeholder=\"Email\" formControlName=\"email\" required>\r\n            <mat-error *ngIf=\"isValid('email')\">\r\n              Please enter your email\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"full-width-input\">\r\n            <input matInput type=\"text\" placeholder=\"Username\" formControlName=\"username\" required>\r\n            <mat-error *ngIf=\"isValid('username')\">\r\n              Please enter your username\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"full-width-input\">\r\n            <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\" required>\r\n            <mat-error *ngIf=\"isValid('password')\">\r\n              Please enter your password\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"full-width-input\">\r\n            <input matInput type=\"password\" placeholder=\"Re-enter Password\" formControlName=\"cnfpass\" required>\r\n            <mat-error *ngIf=\"isValid('cnfpass')\">\r\n              Please re-enter your password\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <button class=\"text-center ml-3\" mat-stroked-button type=\"submit\" (click)=\"register()\">Register</button>\r\n        </form>\r\n        <h1>{{successMsg}}</h1>\r\n        <div class=\"text-center\">\r\n          <span  routerLink=\"/login\"><p>Already have an account?</p>Login</span>\r\n        </div>\r\n      </mat-card-content>\r\n  </div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { RootService } from '../root.service'\r\n\r\n@Component({\r\n  selector: 'app-login-page',\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.scss']\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n\r\n  loginForm:any = FormGroup;\r\n\r\n  constructor(private root: RootService) {\r\n    this.loginForm = new FormGroup({\r\n      email: new FormControl(null, Validators.required),\r\n      password: new FormControl(null, Validators.required)\r\n    });\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  isValid(controlName:any){\r\n    return this.loginForm.get(controlName).invalid && this.loginForm.get(controlName).touched;\r\n  }\r\n\r\n  loginUser(){\r\n    console.log(this.loginForm.value);\r\n    if(this.loginForm.valid){\r\n      this.root.loginUser(this.loginForm.value).subscribe(data => {\r\n        console.log(data)\r\n        localStorage.setItem(\"token\", data.toString())\r\n      },\r\n      error => {\r\n        console.log(\"something went wrong\")\r\n      });\r\n    }\r\n  }\r\n}\r\n","<div class=\"wrapper\">\r\n  <div class=\"signin-content\">\r\n      <mat-card-content>\r\n        <h1>Login</h1>\r\n        <p class=\"welcomeHeading\">Welcome!!<br><br> Please Login to Your Account</p>\r\n        <form [formGroup]=\"loginForm\">\r\n\r\n          <mat-form-field class=\"full-width-input\">\r\n            <input matInput placeholder=\"Email\" formControlName=\"email\" required>\r\n            <mat-error *ngIf=\"isValid('email')\">\r\n              Please inform your user name\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"full-width-input\">\r\n            <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\" required>\r\n            <mat-error *ngIf=\"isValid('password')\">\r\n              Please inform your password\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <button class=\"text-center ml-3\" mat-stroked-button type=\"submit\" (click)=\"loginUser()\">Login</button>\r\n        </form>\r\n        <div class=\"text-center mt-5\">\r\n          <span routerLink=\"/register\"><p>Don't have an account?</p>Register</span>\r\n        </div>\r\n      </mat-card-content>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginPageComponent } from './login-page/login-page.component';\r\nimport { RegisterPageComponent } from './register-page/register-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    component: LoginPageComponent,\r\n    path:'login'\r\n  },\r\n  {\r\n    component: RegisterPageComponent,\r\n    path:'register'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}